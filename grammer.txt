exp:
<primary_exp>		->	identifier <primary_exp_a> | constant | ( <exp> )
<primary_exp_a>		->	e | ( <arg_exp_list> )

<arg_exp_list>		->	e | <asgn_exp> <arg_exp_list_e>
<arg_exp_list_e>->	,<asgn_exp> <arg_exp_list_e> | e

<mul_exp>	->	<primary_exp> <mul_exp_e>
<mul_exp_e>	->	* <primary_exp> <mul_exp_e> | / <primary_exp> <mul_exp_e> |e

<add_exp>	->	<mul_exp> <add_exp_e>
<add_exp_e>	->	+ <mul_exp> <add_exp_e> | - <mul_exp> <add_exp_e> | e

<rel_exp>	->	<add_exp> <rel_exp_e>
<rel_exp_e>	->	< <add_exp> <rel_exp_e> | > <add_exp> <rel_exp_e> | <= <add_exp> <rel_exp_e> | >= <add_exp> <rel_exp_e> | e

<equ_exp>	->	<rel_exp> <equ_exp_e>
<equ_exp_e>	->	== <rel_exp> <equ_exp_e> | != <rel_exp> <equ_exp_e> | e

<asgn_exp>	->	<equ_exp> | <primary_exp> = <asgn_exp>

<exp>		->	<asgn_exp>

decl:
<decl>		->	<var_decl> | <func_decl>
<var_decl>	->	<type_spec> <init_decl_list>
<type_spec>	->	int
<init_decl_list>	->	<init_decl> <init_decl_list_e>
<init_decl_list_e>	->	,<init_decl> <init_decl_list_e> | e
<init_decl>	->	identifier <init_decl_a>
<init_decl_a>	->	= <init> | e
<init>		->	<asgn_exp>
<func_decl>	->	<type_spec> <func_decl_or>
<func_decl_or>	->	identifier ( <para_list> )
<para_list>	->	<para> <para_list_e>
<para_list_e>	->	,<para> <para_list_e> | e
<para>		->	<type_spec> idetifier

statement:
<stm>		->	<decl_stm> | <comp_stm> | <exp_stm> | <selt_stm> | <iter_stm> | <jmp_stm>
<decl_stm>	->	<decl> ;
<comp_stm>	->	{ <stm_list> }
<stm_list>	->	<stm> <stm_list_e>
<stm_list_e>	->	<stm> <stm_list_e> | e

<exp_stm>	->	; | <exp>;
<selt_stm>	->	if ( <exp> ) <stm> <selt_stm_e>
<selt_stm_e>	->	else <stm> | e
<iter_stm>	->	while ( <exp> ) <stm>
<jmp_stm>	->	continue ; | break ; | return ; | return <exp> ; 

function def:
<func_def>	->	<func_decl> <comp_stm>

program:	
<program>			->	<program_part> <program_e>
<program_e>			->	<program_part> <program_e> | e

<program_part>			->	<decl_statement> | <func_def>